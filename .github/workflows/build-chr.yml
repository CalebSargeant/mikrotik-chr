name: Check and Build CHR Image

on:
  schedule:
    - cron: "0 3 * * *"  # Daily at 03:00 UTC
  workflow_dispatch:
  push:
    paths:
      - "scripts/startup.rsc"
      - ".github/workflows/build-chr.yml"

jobs:
  build-chr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Get latest CHR version
        id: get-version
        run: |
          LATEST_VERSION=$(curl -s "https://mikrotik.com/download" \
            | grep -o 'chr-[0-9]\.[0-9]\+\.[0-9]\+\.img\.zip' \
            | grep -v "beta" \
            | grep -v "rc" \
            | sort -V \
            | tail -n 1 \
            | sed 's/chr-\(.*\)\.img\.zip/\1/')
          echo "Latest version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check tag and script commit
        id: check
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists"
            TAG_COMMIT=$(git rev-list -n 1 "$TAG")
            SCRIPT_COMMIT=$(git log -n 1 --pretty=format:%H -- scripts/startup.rsc)
            if [ "$TAG_COMMIT" = "$SCRIPT_COMMIT" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "retag=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "retag=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if up-to-date
        if: steps.check.outputs.skip == 'true'
        run: echo "Already built and script unchanged â€” skipping."

      - name: Install build dependencies
        if: steps.check.outputs.skip == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full qemu-utils parted

      - name: Download latest CHR image
        if: steps.check.outputs.skip == 'false'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          curl -L -o chr.zip https://download.mikrotik.com/routeros/${VERSION}/chr-${VERSION}.img.zip
          unzip chr.zip -d .
          mv chr-${VERSION}.img chr.img

      - name: Inject configuration
        if: steps.check.outputs.skip == 'false'
        run: |
          # Create a modified image
          cp chr.img chr-modified.img
          
          # Extract the CHR image to work with the RouterOS partition
          mkdir -p chr_extracted
          7z x chr.img -o./chr_extracted
          
          # Check the directory contents
          echo "CHR Image contents:"
          ls -la chr_extracted/
          
          # Create a loopback device from the RouterOS partition 
          # (using partition 2 which is the RouterOS partition)
          LOOP_DEVICE=$(sudo losetup -f)
          echo "Using loop device: $LOOP_DEVICE"
          sudo losetup -P $LOOP_DEVICE chr.img
          
          # Wait for partitions to be detected
          sleep 2
          
          # List all loop partitions
          echo "Loop device partitions:"
          ls -la ${LOOP_DEVICE}p*
          
          # Create temp directory for mounting
          mkdir -p mnt
          
          # Try to mount the second partition
          echo "Mounting partition ${LOOP_DEVICE}p2"
          sudo mount ${LOOP_DEVICE}p2 mnt
          
          # Check mount status
          echo "Mount status:"
          mount | grep mnt
          
          # List the mounted filesystem
          echo "Mounted filesystem contents:"
          ls -la mnt/
          
          # Create the directory structure
          sudo mkdir -p mnt/rw/store/
          
          # Copy the startup script
          sudo cp scripts/startup.rsc mnt/rw/store/
          
          # Verify the file was copied
          echo "Content of rw/store after copy:"
          ls -la mnt/rw/store/
          
          # Sync to ensure all writes are complete
          sudo sync
          
          # Unmount filesystem
          sudo umount mnt
          
          # Detach loop device
          sudo losetup -d $LOOP_DEVICE
          
          # Extract the modified RouterOS partition
          echo "Extracting the modified RouterOS image from the loop device..."
          
          # Alternative approach using dd directly
          if [ ! -f chr-modified.img ]; then
            # If the loop device approach failed, try 7z to work with direct image files
            echo "Using alternative approach with 7z..."
            
            # Create required directories in the RouterOS file structure
            mkdir -p router_files/rw/store/
            
            # Copy the startup script
            cp scripts/startup.rsc router_files/rw/store/
            
            # Create a tar file with the startup.rsc in the correct location
            cd router_files
            tar -cf ../startup.tar rw/
            cd ..
            
            # Convert the modified disk image back to use as output
            mv chr.img chr-modified.img
          fi

      - name: Compress modified image
        if: steps.check.outputs.skip == 'false'
        run: gzip -c chr-modified.img > chr.img.gz

      - name: Create or update Git tag
        if: steps.check.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git tag -f $TAG
          git push --force origin $TAG

      - name: Create or update GitHub Release
        if: steps.check.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: "MikroTik CHR ${{ steps.get-version.outputs.version }}"
          body: "Pre-baked CHR image with default password, dhcp-client enabled, and disabled ftp,www,telnet,api, injected configuration."
          draft: false
          prerelease: false
          files: chr.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}