---
name: Build Multi-Architecture CHR Images

on:
  schedule:
    - cron: "0 3 * * *"  # Daily at 03:00 UTC
  workflow_dispatch:
  push:
    paths:
      - "scripts/**"
      - ".github/workflows/build-chr.yml"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should-build: ${{ steps.check-version.outputs.should-build }}
      password: ${{ steps.password.outputs.password }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest CHR version
        id: get-version
        run: |
          echo "üîç Attempting to get latest CHR version..."
          
          # Method 1: Try parsing download page
          LATEST_VERSION=$(curl -s "https://mikrotik.com/download" \
            | grep -o 'chr-[0-9]\.[0-9]\+\.[0-9]\+\.img\.zip' \
            | grep -v "beta" \
            | grep -v "rc" \
            | sort -V \
            | tail -n 1 \
            | sed 's/chr-\(.*\)\.img\.zip/\1/' || true)
            
          # Method 2: If that fails, check existing releases to get current version 
          if [ -z "$LATEST_VERSION" ]; then
            echo "‚ö†Ô∏è Download page parsing failed, checking existing releases..."
            LATEST_VERSION=$(git ls-remote --tags origin | \
              grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+$' | \
              sed 's/^v//' | sort -V | tail -n 1 || echo "")
          fi
          
          # Method 3: Fallback to known working version if all else fails
          if [ -z "$LATEST_VERSION" ]; then
            echo "‚ö†Ô∏è All version detection methods failed, using fallback version"
            LATEST_VERSION="7.19.6"
          fi
          
          echo "‚úÖ Latest CHR version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if build needed
        id: check-version
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"
          
          echo "Checking for existing release with tag: $TAG"
          
          # Check if this version already exists as a release
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists"
            # Check if we need to rebuild due to script changes since the tag
            TAG_DATE=$(git log -1 --format=%ct "$TAG" 2>/dev/null || echo "0")
            SCRIPT_DATE=$(git log -1 --format=%ct -- scripts/ .github/workflows/ 2>/dev/null || echo "1")
            if [ "$SCRIPT_DATE" -gt "$TAG_DATE" ]; then
              echo "Scripts/workflows updated since release - rebuilding"
              echo "should-build=true" >> $GITHUB_OUTPUT
            else
              echo "No changes since last release - skipping build"
              echo "should-build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "New version detected - building $VERSION"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate rotating password
        id: password
        if: steps.check-version.outputs.should-build == 'true'
        run: |
          ./scripts/generate-password.sh

  build-images:
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libguestfs-tools unzip curl gzip qemu-user-static

      - name: Cache CHR download
        uses: actions/cache@v4
        id: cache-chr
        with:
          path: chr-base.zip
          key: chr-${{ needs.check-version.outputs.version }}
          restore-keys: |
            chr-

      - name: Download CHR image
        if: steps.cache-chr.outputs.cache-hit != 'true'
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          echo "üì¶ Downloading CHR version: $VERSION"
          
          # MikroTik provides the same image for all architectures currently
          curl -L -o chr-base.zip https://download.mikrotik.com/routeros/${VERSION}/chr-${VERSION}.img.zip
          echo "‚úÖ Download complete"

      - name: Prepare architecture-specific image
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          echo "üèóÔ∏è Preparing image for ${{ matrix.arch }}"
          
          # Extract and rename for this architecture
          unzip chr-base.zip -d .
          mv chr-${VERSION}.img chr-${{ matrix.arch }}.img

      - name: Restore password placeholder
        run: |
          # Ensure we have the placeholder for injection
          # Replace any password attribute value (password="...") with a placeholder.
          # The regex matches password="ANYTHING" and replaces it with password="PLACEHOLDER_PASSWORD".
          # This is necessary to allow safe password injection in a later step.
          sed -i 's/password=\"[^\"]*\"/password=\"PLACEHOLDER_PASSWORD\"/g' scripts/startup.rsc

      - name: Generate rotating password (architecture-specific)
        run: |
          # Use the password from the check-version job
          PASSWORD="${{ needs.check-version.outputs.password }}"
          sed -i "s/PLACEHOLDER_PASSWORD/$PASSWORD/g" scripts/startup.rsc
          echo "üîê Password injected into startup.rsc"

      - name: Mount and modify image using loop device
        run: |
          echo "üîß Creating mount directory..."
          sudo mkdir -p /mnt/chr

          echo "üîß Attaching loop device to chr-${{ matrix.arch }}.img..."
          LOOP_DEV=$(sudo losetup --show -fP chr-${{ matrix.arch }}.img)
          echo "Using loop device: $LOOP_DEV"

          echo "üîß Checking available partitions on loop device:"
          lsblk $LOOP_DEV

          echo "üîß Mounting ${LOOP_DEV}p2 to /mnt/chr..."
          sudo mount ${LOOP_DEV}p2 /mnt/chr

          echo "üîß Mounted image content:"
          sudo ls -lah /mnt/chr

          echo "üîß Injecting autorun.rsc into mounted image..."
          sudo cp scripts/startup.rsc /mnt/chr/autorun.rsc

          echo "‚úÖ Confirming injection:"
          sudo ls -lah /mnt/chr/autorun.rsc
          echo "File contents:"
          sudo cat /mnt/chr/autorun.rsc

          echo "üîß Unmounting and detaching loop device..."
          sudo umount /mnt/chr
          sudo losetup -d $LOOP_DEV

          echo "‚úÖ Configuration injection complete for ${{ matrix.arch }}"

      - name: Compress modified image
        run: |
          echo "üóúÔ∏è Compressing image for ${{ matrix.arch }}..."
          gzip -c chr-${{ matrix.arch }}.img > chr-${{ matrix.arch }}.img.gz
          echo "‚úÖ Compression complete"
          ls -lh chr-${{ matrix.arch }}.img.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chr-${{ matrix.arch }}-image
          path: chr-${{ matrix.arch }}.img.gz
          retention-days: 1

  create-release:
    needs: [check-version, build-images]
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize artifacts
        run: |
          mkdir -p ./release-assets
          # Copy and rename artifacts explicitly to avoid overwriting due to naming conflicts
          AMD64_IMG=$(find ./artifacts -type f -name "chr-amd64.img.gz" | head -n 1)
          ARM64_IMG=$(find ./artifacts -type f -name "chr-arm64.img.gz" | head -n 1)
          if [ -z "$AMD64_IMG" ] || [ -z "$ARM64_IMG" ]; then
            echo "Error: One or both architecture images not found in artifacts."
            exit 1
          fi
          cp "$AMD64_IMG" ./release-assets/chr-amd64.img.gz
          cp "$ARM64_IMG" ./release-assets/chr-arm64.img.gz
          ls -la ./release-assets/

      - name: Create Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          TAG="v${VERSION}"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git tag -f $TAG
          git push --force origin $TAG

      - name: Create unified GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: "MikroTik CHR ${{ needs.check-version.outputs.version }}"
          body: |
            üöÄ **MikroTik CHR ${{ needs.check-version.outputs.version }}** - Multi-Architecture Images

            Pre-configured CHR images for both AMD64 and ARM64 architectures, optimized for cloud deployments.

            ## üì¶ Downloads
            - **`chr-amd64.img.gz`** - For Intel/AMD x86-64 systems
            - **`chr-arm64.img.gz`** - For ARM64 systems (AWS Graviton, etc.)

            ## ‚ú® Features
            - üîê **SSH & API-SSL** enabled for secure remote access
            - üåê **DHCP Client** pre-configured on ether1 (cloud-ready)
            - üîë **Rotating Admin Password**: `${{ needs.check-version.outputs.password }}`
            - ‚òÅÔ∏è **AWS EC2 Compatible** - ready for cloud deployment
            - üõ†Ô∏è **System Identity**: `chr` (pre-configured)

            ## üöÄ Quick Deploy
            ```bash
            # AWS EC2 or any Linux system
            curl -sSL https://raw.githubusercontent.com/CalebSargeant/mikrotik-chr/main/scripts/flash.sh | sudo bash
            ```

            ## üìã Access Information
            - **SSH**: `ssh admin@<your-ip>` (port 22)
            - **WebFig**: `https://<your-ip>:8729` (accept self-signed cert)
            - **Username**: `admin`
            - **Password**: `${{ needs.check-version.outputs.password }}`

            > üîí **Security Note**: Admin password rotates with each build for enhanced security.

            ---
            *For deployment guides and documentation, visit the [repository](https://github.com/CalebSargeant/mikrotik-chr).*
          draft: false
          prerelease: false
          files: ./release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}