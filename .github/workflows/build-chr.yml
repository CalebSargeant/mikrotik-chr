name: Check and Build CHR Image

on:
  schedule:
    - cron: "0 3 * * *"  # Daily at 03:00 UTC
  workflow_dispatch:
  push:
    paths:
      - "scripts/startup.rsc"
      - ".github/workflows/build-chr.yml"

jobs:
  build-chr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Get latest CHR version
        id: get-version
        run: |
          LATEST_VERSION=$(curl -s "https://mikrotik.com/download" \
            | grep -o 'chr-[0-9]\.[0-9]\+\.[0-9]\+\.img\.zip' \
            | grep -v "beta" \
            | grep -v "rc" \
            | sort -V \
            | tail -n 1 \
            | sed 's/chr-\(.*\)\.img\.zip/\1/')
          echo "Latest version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check tag and script commit
        id: check
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists"
            TAG_COMMIT=$(git rev-list -n 1 "$TAG")
            SCRIPT_COMMIT=$(git log -n 1 --pretty=format:%H -- scripts/startup.rsc)
            if [ "$TAG_COMMIT" = "$SCRIPT_COMMIT" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "retag=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "retag=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if up-to-date
        if: steps.check.outputs.skip == 'true'
        run: echo "Already built and script unchanged â€” skipping."

      - name: Install build dependencies
        if: steps.check.outputs.skip == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full qemu-utils

      - name: Download latest CHR image
        if: steps.check.outputs.skip == 'false'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          curl -L -o chr.zip https://download.mikrotik.com/routeros/${VERSION}/chr-${VERSION}.img.zip
          unzip chr.zip -d .
          mv chr-${VERSION}.img chr.img

      - name: Inject configuration
        if: steps.check.outputs.skip == 'false'
        run: |
          # Create a temporary directory for mounting
          mkdir -p mnt
          
          # Create a working copy of the image
          cp chr.img chr-modified.img
          
          # Expand the image to have room for modifications (if needed)
          qemu-img resize chr-modified.img +20M
          
          # Use fdisk to check partition information
          echo "Partition information:"
          fdisk -l chr-modified.img
          
          # Calculate the start offset of the second partition (RouterOS partition)
          # Standard sector size is 512 bytes
          SECTOR_SIZE=512
          SECOND_PART_START=$(fdisk -l chr-modified.img | grep "1.RouterOS.img" | awk '{print $2}')
          
          if [ -z "$SECOND_PART_START" ]; then
            echo "Could not determine the start of the RouterOS partition"
            SECOND_PART_START=$(fdisk -l chr-modified.img | grep -A1 "Device" | tail -1 | awk '{print $2}')
            echo "Using alternative method to find partition: $SECOND_PART_START"
          fi
          
          # Calculate offset in bytes
          OFFSET=$(($SECOND_PART_START * $SECTOR_SIZE))
          echo "Mounting partition at offset: $OFFSET"
          
          # Mount the RouterOS partition
          sudo mount -o loop,offset=$OFFSET chr-modified.img mnt
          
          # Display mounted contents
          echo "Mounted filesystem contents:"
          ls -la mnt/
          
          # Create directory structure if it doesn't exist
          sudo mkdir -p mnt/rw/store/
          
          # Copy the startup script
          sudo cp scripts/startup.rsc mnt/rw/store/
          
          # Display final contents to verify
          echo "Content of rw/store after copy:"
          ls -la mnt/rw/store/
          
          # Unmount
          sudo umount mnt
          
          # Replace the original image
          mv chr-modified.img chr.img

      - name: Compress modified image
        if: steps.check.outputs.skip == 'false'
        run: gzip -c chr.img > chr.img.gz

      - name: Create or update Git tag
        if: steps.check.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git tag -f $TAG
          git push --force origin $TAG

      - name: Create or update GitHub Release
        if: steps.check.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: "MikroTik CHR ${{ steps.get-version.outputs.version }}"
          body: "Pre-baked CHR image with default password, dhcp-client enabled, and disabled ftp,www,telnet,api, injected configuration."
          draft: false
          prerelease: false
          files: chr.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}