name: Check and Build CHR Image

on:
  schedule:
    - cron: "0 3 * * *"  # Daily at 03:00 UTC
  workflow_dispatch:
  push:
    paths:
      - "scripts/startup.rsc"
      - ".github/workflows/build-chr.yml"

jobs:
  build-chr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Get latest CHR version
        id: get-version
        run: |
          LATEST_VERSION=$(curl -s "https://mikrotik.com/download" \
            | grep -o 'chr-[0-9]\.[0-9]\+\.[0-9]\+\.img\.zip' \
            | grep -v "beta" \
            | grep -v "rc" \
            | sort -V \
            | tail -n 1 \
            | sed 's/chr-\(.*\)\.img\.zip/\1/')
          echo "Latest version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check tag and script commit
        id: check
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists"
            TAG_COMMIT=$(git rev-list -n 1 "$TAG")
            SCRIPT_COMMIT=$(git log -n 1 --pretty=format:%H -- scripts/startup.rsc)
            if [ "$TAG_COMMIT" = "$SCRIPT_COMMIT" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "retag=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "retag=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if up-to-date
        if: steps.check.outputs.skip == 'true'
        run: echo "Already built and script unchanged â€” skipping."

      - name: Install build dependencies
        if: steps.check.outputs.skip == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y libguestfs-tools unzip curl gzip

      - name: Download latest CHR image
        if: steps.check.outputs.skip == 'false'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          curl -L -o chr.zip https://download.mikrotik.com/routeros/${VERSION}/chr-${VERSION}.img.zip
          unzip chr.zip -d .
          mv chr-${VERSION}.img chr.img

      - name: Mount and modify image using loop device
        run: |
          sudo mkdir /mnt/chr
          LOOP_DEV=$(sudo losetup --show -fP chr.img)
          echo "Using loop device: $LOOP_DEV"
          sudo mount ${LOOP_DEV}p1 /mnt/chr
      
          # Inject config
          sudo cp scripts/startup.rsc /mnt/chr/autorun.rsc
      
          sudo umount /mnt/chr
          sudo losetup -d $LOOP_DEV

      - name: Compress modified image
        if: steps.check.outputs.skip == 'false'
        run: gzip -c chr-modified.img > chr.img.gz

      - name: Create or update Git tag
        if: steps.check.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git tag -f $TAG
          git push --force origin $TAG

      - name: Create or update GitHub Release
        if: steps.check.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: "MikroTik CHR ${{ steps.get-version.outputs.version }}"
          body: "Pre-baked CHR image with default password, dhcp-client enabled, and disabled ftp,www,telnet,api, injected configuration."
          draft: false
          prerelease: false
          files: chr.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}