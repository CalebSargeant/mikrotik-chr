---
name: Build Multi-Architecture CHR Images

on:
  schedule:
    - cron: "0 3 * * *"  # Daily at 03:00 UTC
  workflow_dispatch:
  push:
    paths:
      - "scripts/**"
      - ".github/workflows/build-chr.yml"

jobs:
  build-chr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Get latest CHR version
        id: get-version
        run: |
          LATEST_VERSION=$(curl -s "https://mikrotik.com/download" \
            | grep -o 'chr-[0-9]\.[0-9]\+\.[0-9]\+\.img\.zip' \
            | grep -v "beta" \
            | grep -v "rc" \
            | sort -V \
            | tail -n 1 \
            | sed 's/chr-\(.*\)\.img\.zip/\1/')
          echo "Latest version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Generate rotating password
        id: password
        run: |
          ./scripts/generate-password.sh

      - name: Check existing release
        id: check
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}-${{ matrix.arch }}"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists"
            # Check if we need to rebuild due to script changes
            TAG_DATE=$(git log -1 --format=%ct "$TAG" 2>/dev/null || echo "0")
            SCRIPT_DATE=$(git log -1 --format=%ct -- scripts/ 2>/dev/null || echo "1")
            if [ "$SCRIPT_DATE" -gt "$TAG_DATE" ]; then
              echo "Scripts newer than tag - rebuilding"
              echo "skip=false" >> $GITHUB_OUTPUT
            else
              echo "skip=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if up-to-date
        if: steps.check.outputs.skip == 'true'
        run: |
          echo "Already built and script unchanged â€” skipping ${{ matrix.arch }}."

      - name: Install build dependencies
        if: steps.check.outputs.skip == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y libguestfs-tools unzip curl gzip qemu-user-static

      - name: Download CHR image
        if: steps.check.outputs.skip == 'false'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Download appropriate architecture image
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            # MikroTik doesn't provide separate ARM64 images, we'll use the generic one
            # and document the limitation
            curl -L -o chr.zip https://download.mikrotik.com/routeros/${VERSION}/chr-${VERSION}.img.zip
          else
            curl -L -o chr.zip https://download.mikrotik.com/routeros/${VERSION}/chr-${VERSION}.img.zip
          fi

          unzip chr.zip -d .
          mv chr-${VERSION}.img chr-${{ matrix.arch }}.img

      - name: Mount and modify image using loop device
        if: steps.check.outputs.skip == 'false'
        run: |
          echo "Creating mount directory..."
          sudo mkdir -p /mnt/chr

          echo "Attaching loop device to chr-${{ matrix.arch }}.img..."
          LOOP_DEV=$(sudo losetup --show -fP chr-${{ matrix.arch }}.img)
          echo "Using loop device: $LOOP_DEV"

          echo "Checking available partitions on loop device:"
          lsblk $LOOP_DEV

          echo "Mounting ${LOOP_DEV}p2 to /mnt/chr..."
          sudo mount ${LOOP_DEV}p2 /mnt/chr

          echo "Mounted image content:"
          sudo ls -lah /mnt/chr

          echo "Injecting autorun.rsc into mounted image..."
          sudo cp scripts/startup.rsc /mnt/chr/autorun.rsc

          echo "Confirming injection:"
          sudo ls -lah /mnt/chr/autorun.rsc
          echo "File contents:"
          sudo cat /mnt/chr/autorun.rsc

          echo "Unmounting and detaching loop device..."
          sudo umount /mnt/chr
          sudo losetup -d $LOOP_DEV

          echo "Done injecting configuration for ${{ matrix.arch }}."

      - name: Compress modified image
        if: steps.check.outputs.skip == 'false'
        run: gzip -c chr-${{ matrix.arch }}.img > chr-${{ matrix.arch }}.img.gz

      - name: Create or update Git tag
        if: steps.check.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          TAG="v${VERSION}-${{ matrix.arch }}"

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git tag -f $TAG
          git push --force origin $TAG

      - name: Create or update GitHub Release
        if: steps.check.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}-${{ matrix.arch }}
          name: "MikroTik CHR ${{ steps.get-version.outputs.version }} (${{ matrix.arch }})"
          body: |
            Pre-configured CHR image for ${{ matrix.arch }} architecture.

            **Features:**
            - SSH and API-SSL enabled for secure access
            - DHCP client configured on ether1 (perfect for cloud deployments)
            - Rotating admin password: `${{ steps.password.outputs.password }}`
            - Ready for AWS EC2 deployment

            **Security Note:** The admin password is rotated with each build for security.
          draft: false
          prerelease: false
          files: chr-${{ matrix.arch }}.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}